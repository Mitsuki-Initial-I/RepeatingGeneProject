using UnityEngine;

public class Creature : MonoBehaviour
{
    // 基本パラメータ
    public float speed = 5f;                    // 移動速度
    public float energy = 100f;                 // エネルギー
    public float energyConsumptionRate = 1f;    // エネルギー消費速度

    // 寿命のパラメータ
    public float lifespan = 100f;               // 寿命（時間経過で減少）
    public float age = 0f;                      // 現在の年齢

    // 三大欲求のパラメータ
    public float hunger = 100f;                 // 食欲
    public float hungerDecreaseRate = 0.5f;     // 食欲の減少速度
    public float sleepiness = 0f;               // 睡眠欲
    public float sleepinessIncreaseRate = 0.3f; // 睡眠欲の増加速度
    public float matingDesire = 50f;            // 性欲
    public float matingDesireIncreaseRate = 0.1f;// 性欲の増加速度

    // 行動ステート
    private enum State
    {
        Idle,
        Moving,
        SeekingFood,
        Eating,
        SeekingSleep,
        Sleeping,
        Mating,
        Dead  // 死亡状態
    }

    private State currentState = State.Idle;

    // 行動にかかる時間
    private float actionTimer = 0f;

    // 行動の持続時間
    public float seekFoodDuration = 3f;
    public float eatDuration = 2f;
    public float seekSleepDuration = 3f;
    public float sleepDuration = 5f;

    private bool isMoving = true;               // 移動中かどうか

    void Start()
    {
        Debug.Log("Creature has started with energy: " + energy);
        currentState = State.Moving;
    }

    void Update()
    {
        // 寿命の更新
        age += Time.deltaTime;
        if (age >= lifespan)
        {
            Die();
            return;  // 寿命が尽きたので処理を停止
        }

        // エネルギーが残っているか確認
        if (energy > 0)
        {
            ConsumeEnergy();
            HandleDesires();
            HandleState();
        }
        else
        {
            Stop();
        }

        // エネルギーの残量と寿命をデバッグログに表示
        Debug.Log("Current energy: " + energy);
        Debug.Log("Current age: " + age + " / Lifespan: " + lifespan);
    }

    // エネルギーを消費 (消費をシミュレーションしてログに表示)
    void ConsumeEnergy()
    {
        energy -= energyConsumptionRate * Time.deltaTime;
        Debug.Log("Energy consumed. Current energy: " + energy);
    }

    // エネルギーがなくなったら停止
    void Stop()
    {
        if (isMoving)
        {
            isMoving = false;
            speed = 0f;
            Debug.Log("Energy depleted. Creature stopped.");
        }
    }

    // エネルギーを回復する関数
    public void RestoreEnergy(float amount)
    {
        energy += amount;
        Debug.Log("Energy restored. Current energy: " + energy);

        if (energy > 0 && !isMoving)
        {
            Resume();
        }
    }

    // 動きを再開する処理
    void Resume()
    {
        isMoving = true;
        speed = 5f;  // 元のスピードに戻す
        Debug.Log("Creature resumed moving with energy: " + energy);
        currentState = State.Moving;
    }

    // 欲求の処理
    void HandleDesires()
    {
        HandleHunger();
        HandleSleepiness();
        HandleMatingDesire();
    }

    // 食欲の処理
    void HandleHunger()
    {
        hunger -= hungerDecreaseRate * Time.deltaTime;
        if (hunger <= 0)
        {
            hunger = 0;
            Debug.Log("Creature is starving!");
        }
        else
        {
            Debug.Log("Current hunger: " + hunger);
        }
    }

    // 睡眠欲の処理
    void HandleSleepiness()
    {
        sleepiness += sleepinessIncreaseRate * Time.deltaTime;
        if (sleepiness >= 100)
        {
            sleepiness = 100;
            Debug.Log("Creature is very sleepy and needs rest.");
        }
        else
        {
            Debug.Log("Current sleepiness: " + sleepiness);
        }
    }

    // 性欲の処理
    void HandleMatingDesire()
    {
        matingDesire += matingDesireIncreaseRate * Time.deltaTime;
        if (matingDesire >= 100)
        {
            matingDesire = 100;
            Debug.Log("Creature has a strong desire to mate.");
        }
        else
        {
            Debug.Log("Current mating desire: " + matingDesire);
        }
    }

    // ステートに基づいた行動処理
    void HandleState()
    {
        switch (currentState)
        {
            case State.Moving:
                Move();
                // 優先順位: 食欲 > 睡眠欲 > 性欲
                if (hunger <= 20)
                {
                    currentState = State.SeekingFood;
                    actionTimer = 0f;
                    Debug.Log("Creature decides to seek food.");
                }
                else if (sleepiness >= 80)
                {
                    currentState = State.SeekingSleep;
                    actionTimer = 0f;
                    Debug.Log("Creature decides to seek sleep.");
                }
                else if (matingDesire >= 80)
                {
                    currentState = State.Mating;
                    actionTimer = 0f;
                    Debug.Log("Creature decides to mate.");
                }
                break;

            case State.SeekingFood:
                SeekFood();
                actionTimer += Time.deltaTime;
                if (actionTimer >= seekFoodDuration)
                {
                    currentState = State.Eating;
                    actionTimer = 0f;
                    Debug.Log("Creature starts eating.");
                }
                break;

            case State.Eating:
                Eat();
                actionTimer += Time.deltaTime;
                if (actionTimer >= eatDuration)
                {
                    RestoreHunger(50f); // 食欲を回復
                    currentState = State.Moving;
                    Debug.Log("Creature finished eating and resumes moving.");
                }
                break;

            case State.SeekingSleep:
                SeekSleep();
                actionTimer += Time.deltaTime;
                if (actionTimer >= seekSleepDuration)
                {
                    currentState = State.Sleeping;
                    actionTimer = 0f;
                    Debug.Log("Creature starts sleeping.");
                }
                break;

            case State.Sleeping:
                Sleep();
                actionTimer += Time.deltaTime;
                if (actionTimer >= sleepDuration)
                {
                    RestoreSleepiness(100f); // 睡眠欲を回復
                    currentState = State.Moving;
                    Debug.Log("Creature finished sleeping and resumes moving.");
                }
                break;

            case State.Mating:
                Mating();
                actionTimer += Time.deltaTime;
                if (actionTimer >= 2f) // 簡単な時間設定
                {
                    ResetMatingDesire();
                    currentState = State.Moving;
                    Debug.Log("Creature finished mating and resumes moving.");
                }
                break;

            case State.Dead:
                // 死亡状態なので何もしない
                Debug.Log("Creature is dead.");
                break;

            case State.Idle:
            default:
                Debug.Log("Creature is idle.");
                break;
        }
    }

    // 生物の移動処理 (移動をシミュレーションしてログに表示)
    void Move()
    {
        Debug.Log("Creature is moving forward at speed: " + speed);
    }

    // 食物を探す処理
    void SeekFood()
    {
        Debug.Log("Creature is seeking food...");
    }

    // 食べる処理
    void Eat()
    {
        Debug.Log("Creature is eating...");
    }

    // 睡眠を探す処理
    void SeekSleep()
    {
        Debug.Log("Creature is seeking a place to sleep...");
    }

    // 睡眠をとる処理
    void Sleep()
    {
        Debug.Log("Creature is sleeping...");
    }

    // 交尾をする処理
    void Mating()
    {
        Debug.Log("Creature is mating...");
    }

    // 食欲を回復する関数
    void RestoreHunger(float amount)
    {
        hunger += amount;
        if (hunger > 100f)
            hunger = 100f;
        Debug.Log("Hunger restored. Current hunger: " + hunger);
    }

    // 睡眠欲を回復する関数
    void RestoreSleepiness(float amount)
    {
        sleepiness -= amount;
        if (sleepiness < 0f)
            sleepiness = 0f;
        Debug.Log("Sleepiness reduced. Current sleepiness: " + sleepiness);
    }

    // 性欲をリセットする関数
    void ResetMatingDesire()
    {
        matingDesire = 0f;
        Debug.Log("Mating desire reset. Current mating desire: " + matingDesire);
    }

    // 死亡処理
    void Die()
    {
        currentState = State.Dead;
        speed = 0f;  // 動けなくする
        Debug.Log("Creature has died at age: " + age);
    }
}
