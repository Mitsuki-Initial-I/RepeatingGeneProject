using System;
using System.Collections.Generic;

public class Creature
{
    public float energy = 100f;
    public float hunger = 100f;
    public float hydration = 100f; // 水分
    public DietType dietType;
    public Emotion emotions;
    public Morality morality;
    public AIThoughtProcess thoughtProcess;

    public Creature(DietType diet)
    {
        dietType = diet;
        emotions = new Emotion();
        morality = new Morality();
        thoughtProcess = new AIThoughtProcess();
    }

    public void Update(float deltaTime, Environment environment, Creature[] otherCreatures)
    {
        // 環境への適応チェック
        AdaptToEnvironment(environment);

        // AIの思考プロセスを呼び出して、新しい行動を発想
        thoughtProcess.Think(environment, this);

        // 捕食行動: 他の生物を見つけて食べられるかどうかを判断
        foreach (var other in otherCreatures)
        {
            if (this != other && FoodChain.CanEat(this, other))
            {
                PerformAction("Hunt", other);
                break;  // 他の生物を捕食したら一旦終了
            }
        }

        // その他の行動
        List<string> availableActions = thoughtProcess.GetAvailableActions();
        string chosenAction = availableActions[new Random().Next(availableActions.Count)];
        
        PerformAction(chosenAction, null);
    }

    // 環境への適応
    public void AdaptToEnvironment(Environment environment)
    {
        // 気温への適応
        if (environment.temperature < 0f || environment.temperature > 35f)
        {
            Console.WriteLine("Creature is uncomfortable with the temperature.");
            energy -= 0.5f; // 不快な気温ではエネルギー消耗が増える
        }

        // 湿度への適応
        if (environment.humidity < 20f || environment.humidity > 80f)
        {
            Console.WriteLine("Creature is uncomfortable with the humidity.");
            hydration -= 0.5f; // 水分消耗が増える
        }

        // 天候への適応
        if (environment.weather == WeatherType.Storm)
        {
            Console.WriteLine("Creature is hiding from the storm.");
            energy -= 1f;  // 嵐ではエネルギー消耗が激しい
        }

        // 地形による行動適応
        switch (environment.terrain)
        {
            case TerrainType.Forest:
                Console.WriteLine("Creature is adapting to the forest.");
                break;
            case TerrainType.Desert:
                Console.WriteLine("Creature is seeking water in the desert.");
                hydration -= 1f; // 砂漠では水分消耗が大きい
                break;
            case TerrainType.Mountain:
                Console.WriteLine("Creature is struggling in the mountains.");
                energy -= 0.5f;  // 山岳地帯では移動が困難
                break;
        }
    }

    // 行動の実行
    public void PerformAction(string action, Creature target)
    {
        Console.WriteLine("Performing action: " + action);

        switch (action)
        {
            case "Move":
                Console.WriteLine("Moving...");
                break;
            case "SeekFood":
                Console.WriteLine("Seeking food...");
                break;
            case "Hunt":
                if (target != null)
                {
                    Console.WriteLine("Hunting and eating: " + target);
                    // 捕食後のエネルギー回復
                    energy += 50f;
                    target.energy = 0f;  // 捕食された生物はエネルギーがゼロになる
                }
                break;
            case "Sleep":
                Console.WriteLine("Sleeping...");
                energy += 20f;  // 睡眠でエネルギー回復
                break;
            case "DrinkWater":
                Console.WriteLine("Drinking water...");
                hydration += 20f; // 水を飲んで水分補給
                break;
            case "Mate":
                Console.WriteLine("Mating...");
                break;
            default:
                Console.WriteLine("Unknown action.");
                break;
        }
    }
}
