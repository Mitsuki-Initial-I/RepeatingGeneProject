using System;
using System.Collections.Generic;

public class Creature
{
    public float speed = 5f;
    public float energy = 100f;
    public float hydration = 100f;
    public float lifespan = 100f;
    public float hunger = 100f;
    public float sleepiness = 0f;
    public float matingDesire = 50f;
    public float socialRank = 1f;

    private float age = 0f;
    public State currentState;
    public DietType dietType;
    public Emotion emotion;
    public Morality morality;
    public AIThoughtProcess thoughtProcess;

    public Creature(DietType diet)
    {
        dietType = diet;
        currentState = State.Moving;
        emotion = new Emotion();
        morality = new Morality();
        thoughtProcess = new AIThoughtProcess();
    }

    public void Update(float deltaTime, Environment environment, Creature[] otherCreatures)
    {
        UpdateAge(deltaTime);
        if (age >= lifespan) return;

        HandleState(environment);
        AdaptToEnvironment(environment);
        thoughtProcess.Think(environment, this);
        ExecutePredation(otherCreatures);
        PerformRandomAction();
    }

    private void UpdateAge(float deltaTime)
    {
        age += deltaTime;
        if (age >= lifespan) Die();
    }

    private void HandleState(Environment environment)
    {
        switch (currentState)
        {
            case State.Moving: Move(); break;
            case State.SeekingFood: SeekFood(environment); break;
            case State.SeekingSleep: SeekSleep(); break;
            case State.Sleeping: Sleep(); break;
            case State.Mating: Mate(); break;
            case State.Eating: Eat(); break;
            default: break;
        }
    }

    private void Move()
    {
        Console.WriteLine("Moving...");
        if (hunger <= 20) currentState = State.SeekingFood;
        else if (sleepiness >= 80) currentState = State.SeekingSleep;
        else if (matingDesire >= 80) currentState = State.Mating;
    }

    private void SeekFood(Environment environment)
    {
        Console.WriteLine("Seeking food...");
        if (environment.GetResourceAvailability() > 0.5f) currentState = State.Eating;
    }

    private void Eat()
    {
        Console.WriteLine("Eating...");
        hunger = Math.Min(hunger + 50f, 100f);
        currentState = State.Moving;
    }

    private void SeekSleep()
    {
        Console.WriteLine("Seeking sleep...");
        currentState = State.Sleeping;
    }

    private void Sleep()
    {
        Console.WriteLine("Sleeping...");
        sleepiness = 0f;
        energy = 100f;
        currentState = State.Moving;
    }

    private void Mate()
    {
        Console.WriteLine("Mating...");
        matingDesire = 0f;
        currentState = State.Moving;
    }

    private void Die()
    {
        currentState = State.Dead;
        Console.WriteLine("Creature has died.");
    }

    private void AdaptToEnvironment(Environment environment)
    {
        if (environment.temperature < 0f || environment.temperature > 35f)
        {
            Console.WriteLine("Creature is uncomfortable with the temperature.");
            energy -= 0.5f;
        }

        if (environment.humidity < 20f || environment.humidity > 80f)
        {
            Console.WriteLine("Creature is uncomfortable with the humidity.");
            hydration -= 0.5f;
        }

        if (environment.weather == WeatherType.Storm)
        {
            Console.WriteLine("Creature is hiding from the storm.");
            energy -= 1f;
        }

        switch (environment.terrain)
        {
            case TerrainType.Forest:
                Console.WriteLine("Creature is adapting to the forest.");
                break;
            case TerrainType.Desert:
                Console.WriteLine("Creature is seeking water in the desert.");
                hydration -= 1f;
                break;
            case TerrainType.Mountain:
                Console.WriteLine("Creature is struggling in the mountains.");
                energy -= 0.5f;
                break;
            default:
                break;
        }
    }

    private void ExecutePredation(Creature[] otherCreatures)
    {
        foreach (var other in otherCreatures)
        {
            if (this != other && FoodChain.CanEat(this, other))
            {
                AI_PerformAction("Hunt", other);
                break;
            }
        }
    }

    private void PerformRandomAction()
    {
        List<string> availableActions = thoughtProcess.GetAvailableActions();
        string chosenAction = availableActions[new Random().Next(availableActions.Count)];
        AI_PerformAction(chosenAction, null);
    }

    private void AI_PerformAction(string action, Creature target)
    {
        Console.WriteLine("Performing action: " + action);

        switch (action)
        {
            case "Move": Move(); break;
            case "SeekFood": SeekFood(null); break;
            case "Hunt":
                Console.WriteLine("Hunting...");
                if (target != null) target.Die();
                break;
            case "Sleep": Sleep(); break;
            case "DrinkWater":
                Console.WriteLine("Drinking water...");
                hydration = Math.Min(hydration + 20f, 100f);
                break;
            case "Mate": Mate(); break;
            default: Console.WriteLine("Unknown action."); break;
        }
    }
}
