using UnityEngine;

public class Creature : MonoBehaviour
{
    // 基本パラメータ
    public float speed = 5f;                // 移動速度
    public float energy = 100f;             // エネルギー
    public float energyConsumptionRate = 1f;  // エネルギー消費速度

    // 三大欲求のパラメータ
    public float hunger = 100f;             // 食欲
    public float hungerDecreaseRate = 0.5f; // 食欲の減少速度
    public float sleepiness = 0f;           // 睡眠欲
    public float sleepinessIncreaseRate = 0.3f; // 睡眠欲の増加速度
    public float matingDesire = 50f;        // 性欲
    public float matingDesireIncreaseRate = 0.1f; // 性欲の増加速度

    private bool isMoving = true;           // 移動中かどうか

    void Start()
    {
        Debug.Log("Creature has started with energy: " + energy);
    }

    void Update()
    {
        if (energy > 0)
        {
            Move();
            ConsumeEnergy();
        }
        else
        {
            Stop();
        }

        HandleDesires();
    }

    // 生物の移動処理 (移動をシミュレーションしてログに表示)
    void Move()
    {
        Debug.Log("Creature is moving forward at speed: " + speed);
    }

    // エネルギーを消費 (消費をシミュレーションしてログに表示)
    void ConsumeEnergy()
    {
        energy -= energyConsumptionRate * Time.deltaTime;
        Debug.Log("Energy consumed. Current energy: " + energy);
    }

    // エネルギーがなくなったら停止
    void Stop()
    {
        if (isMoving)
        {
            isMoving = false;
            speed = 0f;
            Debug.Log("Energy depleted. Creature stopped.");
        }
    }

    // エネルギーを回復する関数
    public void RestoreEnergy(float amount)
    {
        energy += amount;
        Debug.Log("Energy restored. Current energy: " + energy);

        if (energy > 0 && !isMoving)
        {
            Resume();
        }
    }

    // 動きを再開する処理
    void Resume()
    {
        isMoving = true;
        speed = 5f;  // 元のスピードに戻す
        Debug.Log("Creature resumed moving with energy: " + energy);
    }

    // 欲求の処理
    void HandleDesires()
    {
        HandleHunger();
        HandleSleepiness();
        HandleMatingDesire();
    }

    // 食欲の処理
    void HandleHunger()
    {
        hunger -= hungerDecreaseRate * Time.deltaTime;
        if (hunger <= 0)
        {
            hunger = 0;
            Debug.Log("Creature is starving!");
        }
        else
        {
            Debug.Log("Current hunger: " + hunger);
        }
    }

    // 睡眠欲の処理
    void HandleSleepiness()
    {
        sleepiness += sleepinessIncreaseRate * Time.deltaTime;
        if (sleepiness >= 100)
        {
            sleepiness = 100;
            Debug.Log("Creature is very sleepy and needs rest.");
        }
        else
        {
            Debug.Log("Current sleepiness: " + sleepiness);
        }
    }

    // 性欲の処理
    void HandleMatingDesire()
    {
        matingDesire += matingDesireIncreaseRate * Time.deltaTime;
        if (matingDesire >= 100)
        {
            matingDesire = 100;
            Debug.Log("Creature has a strong desire to mate.");
        }
        else
        {
            Debug.Log("Current mating desire: " + matingDesire);
        }
    }
}
