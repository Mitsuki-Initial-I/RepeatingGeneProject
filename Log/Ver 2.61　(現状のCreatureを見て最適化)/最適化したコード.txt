using System;
using System.Collections.Generic;

/// <summary>
/// 生物の基本行動
/// </summary>
public class Creature
{
    public float speed = 5f;
    public float energy = 100f;
    public float hydration = 100f;
    public float lifespan = 100f;
    public float hunger = 100f;
    public float sleepiness = 0f;
    public float matingDesire = 50f;
    public float socialRank = 1f;
    private float age = 0f;
    private float actionTimer = 0f;

    public State currentState;
    public DietType dietType;
    public Emotion emotion;
    public Morality morality;
    public AIThoughtProcess thoughtProcess;

    public Creature(DietType diet)
    {
        dietType = diet;
        currentState = State.Moving;
        emotion = new Emotion();
        morality = new Morality();
        thoughtProcess = new AIThoughtProcess();
    }

    public void Update(float deltaTime, Environment environment, Creature[] otherCreatures)
    {
        // 年齢更新と寿命確認
        UpdateAge(deltaTime);
        if (currentState == State.Dead) return;

        // 環境適応と感情更新
        AdaptToEnvironment(environment);
        thoughtProcess.Think(environment, this);

        // 他の生物との関係性を判断
        InteractWithOtherCreatures(otherCreatures);

        // AIによる行動選択
        ExecuteAction(thoughtProcess.ChooseAction());
    }

    private void UpdateAge(float deltaTime)
    {
        age += deltaTime;
        if (age >= lifespan)
        {
            Die();
        }
    }

    private void AdaptToEnvironment(Environment environment)
    {
        if (environment.temperature < 0f || environment.temperature > 35f)
        {
            Console.WriteLine("Creature is uncomfortable with the temperature.");
            energy -= 0.5f;
        }

        if (environment.humidity < 20f || environment.humidity > 80f)
        {
            Console.WriteLine("Creature is uncomfortable with the humidity.");
            hydration -= 0.5f;
        }

        if (environment.weather == WeatherType.Storm)
        {
            Console.WriteLine("Creature is hiding from the storm.");
            energy -= 1f;
        }
    }

    private void InteractWithOtherCreatures(Creature[] otherCreatures)
    {
        foreach (var other in otherCreatures)
        {
            if (this != other && FoodChain.CanEat(this, other))
            {
                ExecuteAction("Hunt", other);
                break;
            }
        }
    }

    private void ExecuteAction(string action, Creature target = null)
    {
        Console.WriteLine("Performing action: " + action);
        switch (action)
        {
            case "Move":
                Move();
                break;
            case "SeekFood":
                SeekFood();
                break;
            case "Hunt":
                if (target != null) Hunt(target);
                break;
            case "Sleep":
                Sleep();
                break;
            case "DrinkWater":
                DrinkWater();
                break;
            default:
                Console.WriteLine("Unknown action.");
                break;
        }
    }

    private void Move() { Console.WriteLine("Moving..."); }
    private void SeekFood() { Console.WriteLine("Seeking food..."); }
    private void Hunt(Creature target) { Console.WriteLine("Hunting " + target); energy += 50f; }
    private void Sleep() { Console.WriteLine("Sleeping..."); energy += 20f; }
    private void DrinkWater() { Console.WriteLine("Drinking water..."); hydration += 20f; }

    private void Die()
    {
        currentState = State.Dead;
        Console.WriteLine("Creature has died.");
    }
}
